// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: inventory/v1/stock_admin.proto

package invpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StockAdminService_AdjustStock_FullMethodName      = "/inventory.v1.StockAdminService/AdjustStock"
	StockAdminService_SetStock_FullMethodName         = "/inventory.v1.StockAdminService/SetStock"
	StockAdminService_BatchAdjustStock_FullMethodName = "/inventory.v1.StockAdminService/BatchAdjustStock"
)

// StockAdminServiceClient is the client API for StockAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Ошибки (конвенция):
// INVALID_ARGUMENT, NOT_FOUND, ABORTED, FAILED_PRECONDITION, RESOURCE_EXHAUSTED, INTERNAL
type StockAdminServiceClient interface {
	AdjustStock(ctx context.Context, in *AdjustStockRequest, opts ...grpc.CallOption) (*AdjustStockResponse, error)
	SetStock(ctx context.Context, in *SetStockRequest, opts ...grpc.CallOption) (*SetStockResponse, error)
	BatchAdjustStock(ctx context.Context, in *BatchAdjustStockRequest, opts ...grpc.CallOption) (*BatchAdjustStockResponse, error)
}

type stockAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockAdminServiceClient(cc grpc.ClientConnInterface) StockAdminServiceClient {
	return &stockAdminServiceClient{cc}
}

func (c *stockAdminServiceClient) AdjustStock(ctx context.Context, in *AdjustStockRequest, opts ...grpc.CallOption) (*AdjustStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdjustStockResponse)
	err := c.cc.Invoke(ctx, StockAdminService_AdjustStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAdminServiceClient) SetStock(ctx context.Context, in *SetStockRequest, opts ...grpc.CallOption) (*SetStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetStockResponse)
	err := c.cc.Invoke(ctx, StockAdminService_SetStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAdminServiceClient) BatchAdjustStock(ctx context.Context, in *BatchAdjustStockRequest, opts ...grpc.CallOption) (*BatchAdjustStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchAdjustStockResponse)
	err := c.cc.Invoke(ctx, StockAdminService_BatchAdjustStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockAdminServiceServer is the server API for StockAdminService service.
// All implementations must embed UnimplementedStockAdminServiceServer
// for forward compatibility.
//
// Ошибки (конвенция):
// INVALID_ARGUMENT, NOT_FOUND, ABORTED, FAILED_PRECONDITION, RESOURCE_EXHAUSTED, INTERNAL
type StockAdminServiceServer interface {
	AdjustStock(context.Context, *AdjustStockRequest) (*AdjustStockResponse, error)
	SetStock(context.Context, *SetStockRequest) (*SetStockResponse, error)
	BatchAdjustStock(context.Context, *BatchAdjustStockRequest) (*BatchAdjustStockResponse, error)
	mustEmbedUnimplementedStockAdminServiceServer()
}

// UnimplementedStockAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStockAdminServiceServer struct{}

func (UnimplementedStockAdminServiceServer) AdjustStock(context.Context, *AdjustStockRequest) (*AdjustStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustStock not implemented")
}
func (UnimplementedStockAdminServiceServer) SetStock(context.Context, *SetStockRequest) (*SetStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStock not implemented")
}
func (UnimplementedStockAdminServiceServer) BatchAdjustStock(context.Context, *BatchAdjustStockRequest) (*BatchAdjustStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAdjustStock not implemented")
}
func (UnimplementedStockAdminServiceServer) mustEmbedUnimplementedStockAdminServiceServer() {}
func (UnimplementedStockAdminServiceServer) testEmbeddedByValue()                           {}

// UnsafeStockAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockAdminServiceServer will
// result in compilation errors.
type UnsafeStockAdminServiceServer interface {
	mustEmbedUnimplementedStockAdminServiceServer()
}

func RegisterStockAdminServiceServer(s grpc.ServiceRegistrar, srv StockAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedStockAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StockAdminService_ServiceDesc, srv)
}

func _StockAdminService_AdjustStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockAdminServiceServer).AdjustStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockAdminService_AdjustStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockAdminServiceServer).AdjustStock(ctx, req.(*AdjustStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockAdminService_SetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockAdminServiceServer).SetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockAdminService_SetStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockAdminServiceServer).SetStock(ctx, req.(*SetStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockAdminService_BatchAdjustStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAdjustStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockAdminServiceServer).BatchAdjustStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockAdminService_BatchAdjustStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockAdminServiceServer).BatchAdjustStock(ctx, req.(*BatchAdjustStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StockAdminService_ServiceDesc is the grpc.ServiceDesc for StockAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.v1.StockAdminService",
	HandlerType: (*StockAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdjustStock",
			Handler:    _StockAdminService_AdjustStock_Handler,
		},
		{
			MethodName: "SetStock",
			Handler:    _StockAdminService_SetStock_Handler,
		},
		{
			MethodName: "BatchAdjustStock",
			Handler:    _StockAdminService_BatchAdjustStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory/v1/stock_admin.proto",
}
